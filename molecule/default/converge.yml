---
## This is pretty kludgy but how we have to deal with the network change
# - name: Run the playbook for step1
#   ansible.builtin.import_playbook: ../../site.yml
#   vars:
#     step1: true

# - name: Replace inventory IPs and reboot
#   hosts: all
#   tasks:
    # - name: Show IP
    #   ansible.builtin.set_fact:
    #     old_ip_address: "{{ ansible_host }}"

    # - name: Reboot and forget since network will change
    #   ansible.builtin.command: shutdown -r +0
    #   changed_when: false
    #   become: true
    #   poll: 0

    # - name: Wait for the reboot
    #   ansible.builtin.pause:
    #     seconds: 10

    # - name: Grab the IP of the host # noqa risky-shell-pipe
    #   ansible.builtin.shell: >-
    #     virsh net-dhcp-leases vagrant-libvirt |
    #     grep {{ inventory_hostname }} |
    #     awk '{print $5}'
    #   changed_when: false
    #   delegate_to: localhost
    #   connection: local
    #   register: new_ip_address

    # - name: Replace IP Address with new one
    #   ansible.builtin.replace:
    #     path: "{{ item }}"
    #     regexp: "{{ old_ip_address }}"
    #     replace: "{{ new_ip_address.stdout | ansible.utils.ipv4('address') }}"
    #   delegate_to: localhost
    #   connection: local
    #   loop: "{{ files_needing_changed }}"

    # - name: Update the inventory with new IPs
    #   ansible.builtin.meta: refresh_inventory

- name: Run the playbook for step1
  ansible.builtin.import_playbook: ../../site.yml
  vars:
    step2: true
